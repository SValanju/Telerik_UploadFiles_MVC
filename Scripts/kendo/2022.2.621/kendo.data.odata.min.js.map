{"version":3,"file":"kendo.data.odata.min.js","sources":["kendo.data.odata.js"],"sourcesContent":["(function(f, define) {\n    define('kendo.data.odata',[ \"kendo.core\" ], f);\n})(function() {\n\nvar __meta__ = { // jshint ignore:line\n    id: \"data.odata\",\n    name: \"OData\",\n    category: \"framework\",\n    depends: [ \"core\" ],\n    hidden: true\n};\n\n(function($, undefined) {\n    var kendo = window.kendo,\n        extend = $.extend,\n        NEWLINE = \"\\r\\n\",\n        DOUBLELINE = \"\\r\\n\\r\\n\",\n        isFunction = kendo.isFunction,\n        odataFilters = {\n            eq: \"eq\",\n            neq: \"ne\",\n            gt: \"gt\",\n            gte: \"ge\",\n            lt: \"lt\",\n            lte: \"le\",\n            contains: \"substringof\",\n            doesnotcontain: \"substringof\",\n            endswith: \"endswith\",\n            startswith: \"startswith\",\n            isnull: \"eq\",\n            isnotnull: \"ne\",\n            isnullorempty: \"eq\",\n            isnotnullorempty: \"ne\",\n            isempty: \"eq\",\n            isnotempty: \"ne\"\n        },\n        odataFiltersVersionFour = extend({}, odataFilters, {\n            contains: \"contains\"\n        }),\n        mappers = {\n            pageSize: $.noop,\n            page: $.noop,\n            filter: function(params, filter, useVersionFour) {\n                if (filter) {\n                    filter = toOdataFilter(filter, useVersionFour);\n                    if (filter) {\n                        params.$filter = filter;\n                    }\n                }\n            },\n            sort: function(params, orderby) {\n                var expr = $.map(orderby, function(value) {\n                    var order = value.field.replace(/\\./g, \"/\");\n\n                    if (value.dir === \"desc\") {\n                        order += \" desc\";\n                    }\n\n                    return order;\n                }).join(\",\");\n\n                if (expr) {\n                    params.$orderby = expr;\n                }\n            },\n            skip: function(params, skip) {\n                if (skip) {\n                    params.$skip = skip;\n                }\n            },\n            take: function(params, take) {\n                if (take) {\n                    params.$top = take;\n                }\n            }\n        },\n        defaultDataType = {\n            read: {\n                dataType: \"jsonp\"\n            }\n        };\n\n    function toOdataFilter(filter, useOdataFour) {\n        var result = [],\n            logic = filter.logic || \"and\",\n            idx,\n            length,\n            field,\n            type,\n            format,\n            operator,\n            value,\n            ignoreCase,\n            filters = filter.filters;\n\n        for (idx = 0, length = filters.length; idx < length; idx++) {\n            filter = filters[idx];\n            field = filter.field;\n            value = filter.value;\n            operator = filter.operator;\n\n            if (filter.filters) {\n                filter = toOdataFilter(filter, useOdataFour);\n            } else {\n                ignoreCase = filter.ignoreCase;\n                field = field.replace(/\\./g, \"/\");\n                filter = odataFilters[operator];\n                if (useOdataFour) {\n                    filter = odataFiltersVersionFour[operator];\n                }\n\n                if (operator === \"isnullorempty\") {\n                    filter = kendo.format(\"{0} {1} null or {0} {1} ''\", field, filter);\n                } else if (operator === \"isnotnullorempty\") {\n                    filter = kendo.format(\"{0} {1} null and {0} {1} ''\", field, filter);\n                } else if (operator === \"isnull\" || operator === \"isnotnull\") {\n                    filter = kendo.format(\"{0} {1} null\", field, filter);\n                } else if (operator === \"isempty\" || operator === \"isnotempty\") {\n                    filter = kendo.format(\"{0} {1} ''\", field, filter);\n                } else if (filter && value !== undefined) {\n                    type = kendo.type(value);\n                    if (type === \"string\") {\n                        format = \"'{1}'\";\n                        value = value.replace(/'/g, \"''\");\n\n                        if (ignoreCase === true) {\n                            field = \"tolower(\" + field + \")\";\n                        }\n\n                    } else if (type === \"date\") {\n                        if (useOdataFour) {\n                            format = \"{1:yyyy-MM-ddTHH:mm:ss+00:00}\";\n                            value = kendo.timezone.apply(value, 'Etc/UTC');\n                        } else {\n                            format = \"datetime'{1:yyyy-MM-ddTHH:mm:ss}'\";\n                        }\n                    } else {\n                        format = \"{1}\";\n                    }\n\n                    if (filter.length > 3) {\n                        if (filter !== \"substringof\") {\n                            format = \"{0}({2},\" + format + \")\";\n                        } else {\n                            format = \"{0}(\" + format + \",{2})\";\n                            if (operator === \"doesnotcontain\") {\n                                if (useOdataFour) {\n                                    format = \"{0}({2},'{1}') eq -1\";\n                                    filter = \"indexof\";\n                                } else {\n                                    format += \" eq false\";\n                                }\n                            }\n                        }\n                    } else {\n                        format = \"{2} {0} \" + format;\n                    }\n\n                    filter = kendo.format(format, filter, value, field);\n                }\n            }\n\n            result.push(filter);\n        }\n\n        filter = result.join(\" \" + logic + \" \");\n\n        if (result.length > 1) {\n            filter = \"(\" + filter + \")\";\n        }\n\n        return filter;\n    }\n\n    function stripMetadata(obj) {\n        for (var name in obj) {\n            if (name.indexOf(\"@odata\") === 0) {\n                delete obj[name];\n            }\n        }\n    }\n\n    function hex16() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);\n    }\n\n    function createBoundary(prefix) {\n        return prefix + hex16() + '-' + hex16() + '-' + hex16();\n    }\n\n    function createDelimeter(boundary, close) {\n        var result = NEWLINE + \"--\" + boundary;\n\n        if (close) {\n            result += \"--\";\n        }\n\n        return result;\n    }\n\n    function createCommand(transport, item, httpVerb, command) {\n         var transportUrl = transport.options[command].url;\n         var commandPrefix = kendo.format(\"{0} \", httpVerb);\n\n         if (isFunction(transportUrl)) {\n             return commandPrefix + transportUrl(item);\n         } else {\n             return commandPrefix + transportUrl;\n         }\n    }\n\n    function getOperationHeader(changeset, changeId) {\n        var header = \"\";\n\n        header += createDelimeter(changeset, false);\n        header += NEWLINE + 'Content-Type: application/http';\n        header += NEWLINE + 'Content-Transfer-Encoding: binary';\n        header += NEWLINE + 'Content-ID: ' + changeId;\n\n        return header;\n    }\n\n    function getOperationContent(item) {\n        var content = \"\";\n\n        content += NEWLINE + \"Content-Type: application/json;odata=minimalmetadata\";\n        content += NEWLINE + \"Prefer: return=representation\";\n        content += DOUBLELINE + kendo.stringify(item);\n\n        return content;\n    }\n\n    function getOperations(collection, changeset, changeId, command, transport, skipContent) {\n        var requestBody = \"\";\n\n        for (var i = 0; i < collection.length; i++) {\n            requestBody += getOperationHeader(changeset, changeId);\n            requestBody += DOUBLELINE + createCommand(transport, collection[i], transport.options[command].type, command) + ' HTTP/1.1';\n            if (!skipContent) {\n                requestBody += getOperationContent(collection[i]);\n            }\n            requestBody += NEWLINE;\n            changeId++;\n        }\n\n        return requestBody;\n    }\n\n    function processCollection(colection, boundary, changeset, changeId, transport, command, skipContent) {\n        var requestBody = \"\";\n\n        requestBody += getBoundary(boundary, changeset);\n        requestBody += getOperations(colection, changeset, changeId, command, transport, skipContent);\n        requestBody += createDelimeter(changeset, true);\n        requestBody += NEWLINE;\n\n        return requestBody;\n    }\n\n    function getBoundary(boundary,changeset) {\n        var requestBody = \"\";\n\n        requestBody += \"--\" + boundary + NEWLINE;\n        requestBody += \"Content-Type: multipart/mixed; boundary=\" + changeset + NEWLINE;\n\n        return requestBody;\n    }\n\n    function createBatchRequest(transport, colections) {\n\t\tvar options = extend({}, transport.options.batch);\n        var boundary = createBoundary(\"sf_batch_\");\n        var requestBody = \"\";\n        var changeId = 0;\n        var batchURL = transport.options.batch.url;\n        var changeset = createBoundary(\"sf_changeset_\");\n\n        options.type = transport.options.batch.type;\n        options.url = isFunction(batchURL) ? batchURL() : batchURL;\n\t\toptions.headers = extend(options.headers || {}, {\n\t\t\t\"Content-Type\": \"multipart/mixed; boundary=\" + boundary\n\t\t});\n\n        if (colections.updated.length) {\n            requestBody += processCollection(colections.updated, boundary, changeset, changeId, transport, \"update\", false);\n            changeId += colections.updated.length;\n            changeset = createBoundary(\"sf_changeset_\");\n        }\n\n        if (colections.destroyed.length) {\n            requestBody += processCollection(colections.destroyed, boundary, changeset, changeId, transport, \"destroy\", true);\n            changeId += colections.destroyed.length;\n            changeset = createBoundary(\"sf_changeset_\");\n        }\n\n        if (colections.created.length) {\n            requestBody += processCollection(colections.created, boundary, changeset, changeId, transport, \"create\", false);\n        }\n\n        requestBody += createDelimeter(boundary, true);\n\n        options.data = requestBody;\n\n        return options;\n    }\n\n    function parseBatchResponse(responseText) {\n        var responseMarkers = responseText.match(/--changesetresponse_[a-z0-9-]+$/gm);\n        var markerIndex = 0;\n        var collections = [];\n        var changeBody;\n        var status;\n        var code;\n        var marker;\n        var jsonModel;\n\n        collections.push({ models: [], passed: true });\n\n        for (var i = 0; i < responseMarkers.length; i++) {\n            marker = responseMarkers[i];\n            if (marker.lastIndexOf('--', marker.length - 1)) {\n                if (i < responseMarkers.length - 1) {\n                    collections.push({ models: [], passed: true });\n                }\n                continue;\n            }\n\n            if (!markerIndex) {\n                markerIndex = responseText.indexOf(marker);\n            } else {\n                markerIndex = responseText.indexOf(marker, markerIndex + marker.length);\n            }\n\n            changeBody = responseText.substring(markerIndex, responseText.indexOf(\"--\", markerIndex + 1));\n            status = changeBody.match(/^HTTP\\/1\\.\\d (\\d{3}) (.*)$/gm).pop();\n            code = kendo.parseFloat(status.match(/\\d{3}/g).pop());\n\n            if (code >= 200 && code <= 299) {\n                jsonModel = changeBody.match(/\\{.*\\}/gm);\n                if (jsonModel) {\n                    collections[collections.length - 1].models.push(JSON.parse(jsonModel[0]));\n                }\n            } else {\n                collections[collections.length - 1].passed = false;\n            }\n\n        }\n\n        return collections;\n    }\n\n    extend(true, kendo.data, {\n        schemas: {\n            odata: {\n                type: \"json\",\n                data: function(data) {\n                    return data.d.results || [data.d];\n                },\n                total: \"d.__count\"\n            }\n        },\n        transports: {\n            odata: {\n                read: {\n                    cache: true, // to prevent jQuery from adding cache buster\n                    dataType: \"jsonp\",\n                    jsonp: \"$callback\"\n                },\n                update: {\n                    cache: true,\n                    dataType: \"json\",\n                    contentType: \"application/json\", // to inform the server the the request body is JSON encoded\n                    type: \"PUT\" // can be PUT or MERGE\n                },\n                create: {\n                    cache: true,\n                    dataType: \"json\",\n                    contentType: \"application/json\",\n                    type: \"POST\" // must be POST to create new entity\n                },\n                destroy: {\n                    cache: true,\n                    dataType: \"json\",\n                    type: \"DELETE\"\n                },\n                parameterMap: function(options, type, useVersionFour) {\n                    var params,\n                        value,\n                        option,\n                        dataType;\n\n                    options = options || {};\n                    type = type || \"read\";\n                    dataType = (this.options || defaultDataType)[type];\n                    dataType = dataType ? dataType.dataType : \"json\";\n\n                    if (type === \"read\") {\n                        params = {\n                            $inlinecount: \"allpages\"\n                        };\n\n                        if (dataType != \"json\") {\n                            params.$format = \"json\";\n                        }\n\n                        for (option in options) {\n                            if (mappers[option]) {\n                                mappers[option](params, options[option], useVersionFour);\n                            } else {\n                                params[option] = options[option];\n                            }\n                        }\n                    } else {\n                        if (dataType !== \"json\") {\n                            throw new Error(\"Only json dataType can be used for \" + type + \" operation.\");\n                        }\n\n                        if (type !== \"destroy\") {\n                            for (option in options) {\n                                value = options[option];\n                                if (typeof value === \"number\") {\n                                    options[option] = value + \"\";\n                                }\n                            }\n\n                            params = kendo.stringify(options);\n                        }\n                    }\n\n                    return params;\n                }\n            }\n        }\n    });\n\n    extend(true, kendo.data, {\n        schemas: {\n            \"odata-v4\": {\n                type: \"json\",\n                data: function(data) {\n                    if (Array.isArray(data)) {\n                        for (var i = 0; i < data.length; i++) {\n                            stripMetadata(data[i]);\n                        }\n                        return data;\n                    } else {\n                        data = $.extend({}, data);\n                        stripMetadata(data);\n\n                        if (data.value) {\n                            return data.value;\n                        }\n                        return [data];\n                    }\n                },\n                total: function(data) {\n                    return data[\"@odata.count\"];\n                }\n            }\n        },\n        transports: {\n            \"odata-v4\": {\n                batch: {\n                    type: \"POST\"\n                },\n                read: {\n                    cache: true, // to prevent jQuery from adding cache buster\n                    dataType: \"json\"\n                },\n                update: {\n                    cache: true,\n                    dataType: \"json\",\n                    contentType: \"application/json;IEEE754Compatible=true\", // to inform the server the the request body is JSON encoded\n                    type: \"PUT\" // can be PUT or MERGE\n                },\n                create: {\n                    cache: true,\n                    dataType: \"json\",\n                    contentType: \"application/json;IEEE754Compatible=true\",\n                    type: \"POST\" // must be POST to create new entity\n                },\n                destroy: {\n                    cache: true,\n                    dataType: \"json\",\n                    type: \"DELETE\"\n                },\n                parameterMap: function(options, type) {\n                    var result = kendo.data.transports.odata.parameterMap(options, type, true);\n                    if (type == \"read\") {\n                        result.$count = true;\n                        delete result.$inlinecount;\n                    }\n\n\t\t\t\t\tif (result && result.$filter) {\n\t\t\t\t\t\t// Remove the single quotation marks around the GUID (OData v4).\n\t\t\t\t\t\tresult.$filter = result.$filter.replace(/('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')/ig, function(x) {\n\t\t\t\t\t\t\treturn x.substring(1, x.length - 1);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n                    return result;\n                },\n                submit: function(e) {\n                    var that = this;\n                    var options = createBatchRequest(that, e.data);\n                    var collections = e.data;\n\n                    if (!collections.updated.length && !collections.destroyed.length && !collections.created.length) {\n                        return;\n                    }\n\n                    $.ajax(extend(true, {}, {\n                        success: function(response) {\n                            var responses = parseBatchResponse(response);\n                            var index = 0;\n                            var current;\n\n                            if (collections.updated.length) {\n                                current = responses[index];\n                                if (current.passed) {\n                                    // Pass either the obtained models or an empty array if only status codes are returned.\n                                    e.success(current.models.length ? current.models : [], \"update\");\n                                }\n                                index++;\n                            }\n                            if (collections.destroyed.length) {\n                                current = responses[index];\n                                if (current.passed) {\n                                    // For delete operations OData returns only status codes.\n                                    // Passing empty array to datasource will force it to correctly remove the deleted items from the pristine collection.\n                                    e.success([], \"destroy\");\n                                }\n                                index++;\n                            }\n                            if (collections.created.length) {\n                                current = responses[index];\n                                if (current.passed) {\n                                    e.success(current.models, \"create\");\n                                }\n                            }\n                        },\n                        error: function(response, status, error) {\n                            e.error(response, status, error);\n                        }\n                    }, options));\n                }\n            }\n        }\n    });\n\n})(window.kendo.jQuery);\n\nreturn window.kendo;\n\n}, typeof define == 'function' && define.amd ? define : function(a1, a2, a3) { (a3 || a2)(); });\n\n"],"names":["define","__meta__","id","name","category","depends","hidden","$","window","kendo","jQuery","undefined","extend","NEWLINE","DOUBLELINE","isFunction","odataFilters","eq","neq","gt","gte","lt","lte","contains","doesnotcontain","endswith","startswith","isnull","isnotnull","isnullorempty","isnotnullorempty","isempty","isnotempty","odataFiltersVersionFour","mappers","pageSize","noop","page","filter","params","useVersionFour","toOdataFilter","$filter","sort","orderby","expr","map","value","order","field","replace","dir","join","$orderby","skip","$skip","take","$top","defaultDataType","read","dataType","useOdataFour","result","logic","idx","length","type","format","operator","ignoreCase","filters","timezone","apply","push","stripMetadata","obj","indexOf","hex16","Math","floor","random","toString","substr","createBoundary","prefix","createDelimeter","boundary","close","createCommand","transport","item","httpVerb","command","transportUrl","options","url","commandPrefix","getOperationHeader","changeset","changeId","header","getOperationContent","content","stringify","getOperations","collection","skipContent","requestBody","i","processCollection","colection","getBoundary","createBatchRequest","colections","batch","batchURL","headers","Content-Type","updated","destroyed","created","data","parseBatchResponse","responseText","responseMarkers","match","markerIndex","collections","changeBody","status","code","marker","jsonModel","models","passed","lastIndexOf","substring","pop","parseFloat","JSON","parse","schemas","odata","d","results","total","transports","cache","jsonp","update","contentType","create","destroy","parameterMap","option","this","$inlinecount","$format","Error","odata-v4","Array","isArray","$count","x","submit","e","that","ajax","success","response","responses","index","current","error","amd","a1","a2","a3"],"mappings":"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"}