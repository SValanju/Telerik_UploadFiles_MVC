{"version":3,"file":"kendo.gantt.data.min.js","sources":["kendo.gantt.data.js"],"sourcesContent":["(function(f, define) {\n    define('kendo.gantt.data',[\"kendo.data\", \"kendo.treelist\"], f);\n})(function() {\n\nvar __meta__ = { // jshint ignore:line\n    id: \"gantt.data\",\n    name: \"GanttData\",\n    category: \"web\",\n    description: \"The Gantt Data.\",\n    depends: [ \"data\", \"treelist\" ],\n    hidden: true\n};\n\n(function($, undefined) {\n    var isArray = Array.isArray,\n        extend = $.extend,\n        map = $.map,\n\n        kendoData = kendo.data,\n        Query = kendoData.Query,\n        DataSource = kendoData.DataSource,\n        TreeListDataSource = kendoData.TreeListDataSource,\n        TreeListModel = kendoData.TreeListModel,\n\n        PARENTIDFIELD = \"parentId\";\n\n    var createDataSource = function(type, name) {\n        return function(options) {\n            options = isArray(options) ? { data: options } : options;\n\n            var dataSource = options || {};\n            var data = dataSource.data;\n\n            dataSource.data = data;\n\n            if (!(dataSource instanceof type) && dataSource instanceof DataSource) {\n                throw new Error(\"Incorrect DataSource type. Only \" + name + \" instances are supported\");\n            }\n\n            return dataSource instanceof type ? dataSource : new type(dataSource);\n        };\n    };\n\n    var dateCompareValidator = function(input) {\n        if (input.filter(\"[name=end], [name=start], [name=plannedEnd], [name=plannedStart]\").length) {\n            var field = input.attr(\"name\"),\n                picker = kendo.widgetInstance(input, kendo.ui),\n                dates = {},\n                container = input,\n                editable,\n                model;\n\n            while (container !== window && !editable) {\n                container = container.parent();\n\n                editable = container.data(\"kendoEditable\");\n            }\n\n            model = editable ? editable.options.model : null;\n\n            if (!model) {\n                return true;\n            }\n\n            if (field.indexOf(\"planned\") >= 0) {\n                dates.plannedStart = model.plannedStart;\n                dates.plannedEnd = model.plannedEnd;\n            } else {\n                dates.start = model.start;\n                dates.end = model.end;\n            }\n\n            dates[field] = picker ? picker.value() : kendo.parseDate(input.val());\n\n            if (field.indexOf(\"planned\") >= 0) {\n                return dates.plannedStart <= dates.plannedEnd;\n            } else {\n                return dates.start <= dates.end;\n            }\n        }\n\n        return true;\n    };\n\n    var GanttDependency = kendo.data.Model.define({\n        id: \"id\",\n        fields: {\n            id: { type: \"number\", editable: false },\n            predecessorId: { type: \"number\" },\n            successorId: { type: \"number\" },\n            type: { type: \"number\" }\n        }\n    });\n\n    var GanttDependencyDataSource = DataSource.extend({\n        init: function(options) {\n            DataSource.fn.init.call(this, extend(true, {}, {\n                schema: {\n                    modelBase: GanttDependency,\n                    model: GanttDependency\n                }\n            }, options));\n        },\n\n        dependencies: function(id) {\n            var predecessors = this.predecessors(id),\n                successors = this.successors(id);\n\n            predecessors.push.apply(predecessors, successors);\n\n            return predecessors;\n        },\n\n        predecessors: function(id) {\n            return this._dependencies(\"successorId\", id);\n        },\n\n        successors: function(id) {\n            return this._dependencies(\"predecessorId\", id);\n        },\n\n        _dependencies: function(field, id) {\n            var data = this.view();\n            var filter = {\n                field: field,\n                operator: \"eq\",\n                value: id\n            };\n\n            data = new Query(data).filter(filter).toArray();\n\n            return data;\n        }\n    });\n\n    GanttDependencyDataSource.create = createDataSource(GanttDependencyDataSource, \"GanttDependencyDataSource\");\n\n    var GanttTask = TreeListModel.define({\n        fields: {\n            id: { type: \"number\", editable: false },\n            parentId: { type: \"number\", defaultValue: null, validation: { required: true }, nullable: true },\n            orderId: { type: \"number\", validation: { required: true } },\n            title: { type: \"string\", defaultValue: \"New task\" },\n            start: { type: \"date\", validation: { required: true } },\n            end: {\n                type: \"date\",\n                validation: {\n                    required: true,\n                    dateCompare: dateCompareValidator,\n                    message: \"End date should be after or equal to the start date\"\n                }\n            },\n            percentComplete: { type: \"number\", validation: { required: true, min: 0, max: 1, step: 0.01 } },\n            summary: { type: \"boolean\" },\n            expanded: { type: \"boolean\", defaultValue: true },\n            plannedStart: { type: \"date\", defaultValue: null, nullable: true },\n            plannedEnd: {\n                type: \"date\",\n                defaultValue: null,\n                nullable: true,\n                validation: {\n                    dateCompare: dateCompareValidator,\n                    message: \"Planned end date should be after or equal to the planned start date\"\n                }\n            }\n        },\n\n        duration: function() {\n            var end = this.end,\n                start = this.start;\n\n            return end - start;\n        },\n\n        plannedDuration: function() {\n            var end = this.plannedEnd,\n                start = this.plannedStart;\n\n            if (end && start) {\n                return end - start;\n            }\n\n            return 0;\n        },\n\n        isMilestone: function() {\n            return this.duration() === 0;\n        },\n\n        _offset: function(value) {\n            var field = [\"start\", \"end\"],\n                newValue;\n\n            for (var i = 0; i < field.length; i++) {\n                newValue = new Date(this.get(field[i]).getTime() + value);\n                this.set(field[i], newValue);\n            }\n        },\n\n        _offsetPlanned: function(value) {\n            var field = [\"plannedStart\", \"plannedEnd\"],\n                newValue;\n\n            for (var i = 0; i < field.length; i++) {\n                newValue = new Date(this.get(field[i]).getTime() + value);\n                this.set(field[i], newValue);\n            }\n        }\n    });\n\n    GanttTask.define = function(base, options) {\n        if (options === undefined) {\n            options = base;\n            base = GanttTask;\n        }\n\n        var parentId = options.parentId || PARENTIDFIELD;\n\n        options.parentIdField = parentId;\n\n        var model = TreeListModel.define(base, options);\n\n        if (parentId) {\n            model.parentIdField = parentId;\n        }\n\n        return model;\n    };\n\n    var GanttDataSource = TreeListDataSource.extend({\n        init: function(options) {\n            TreeListDataSource.fn.init.call(this, extend(true, {}, {\n                schema: {\n                    modelBase: GanttTask,\n                    model: GanttTask\n                },\n                sort: { field: \"orderId\", dir: \"asc\" }\n            }, options));\n        },\n\n        add: function(task) {\n            if (!task) {\n                return;\n            }\n\n            task = this._toGanttTask(task);\n\n            return this.insert(this.taskSiblings(task).length, task);\n        },\n\n        insert: function(index, task) {\n            if (!task) {\n                return;\n            }\n\n            task = this._toGanttTask(task);\n\n            task.set(\"orderId\", index);\n\n            task = DataSource.fn.insert.call(this, index, task);\n\n            this._reorderSiblings(task, this.taskSiblings(task).length - 1);\n            this._resolveSummaryFields(this.taskParent(task));\n\n            return task;\n        },\n\n        remove: function(task) {\n            var parentId = task.get(\"parentId\"),\n                children = this.taskAllChildren(task);\n\n            this._removeItems(children);\n\n            task = TreeListDataSource.fn.remove.call(this, task);\n\n            this._childRemoved(parentId, task.get(\"orderId\"));\n\n            return task;\n        },\n\n        taskAllChildren: function(task) {\n            var data = [],\n                that = this;\n            var callback = function(task) {\n                var tasks = that.taskChildren(task);\n\n                data.push.apply(data, tasks);\n                map(tasks, callback);\n            };\n\n            if (!!task) {\n                callback(task);\n            } else {\n                data = this.view();\n            }\n\n            return data;\n        },\n\n        taskChildren: function(task, fromView) {\n            var filter = {\n                field: \"parentId\",\n                operator: \"eq\",\n                value: null\n            };\n\n            var order = (this._sort && this._sort.length) ? this._sort : {\n                field: \"orderId\",\n                dir: \"asc\"\n            };\n            var taskId, data;\n\n            if (fromView) {\n                data = this.view();\n            } else {\n                data = this.data();\n            }\n\n            if (!!task) {\n                taskId = task.get(\"id\");\n\n                if (taskId === undefined || taskId === null || taskId === \"\") {\n                    return [];\n                }\n\n                filter.value = taskId;\n            }\n\n            data = new Query(data).filter(filter).sort(order).toArray();\n\n            return data;\n        },\n\n        taskLevel: function(task) {\n            var level = 0,\n                parent = this.taskParent(task);\n\n            while (parent !== null) {\n                level += 1;\n                parent = this.taskParent(parent);\n            }\n\n            return level;\n        },\n\n        taskParent: function(task) {\n            if (!task || task.get(\"parentId\") === null) {\n                return null;\n            }\n            return this.get(task.parentId);\n        },\n\n        taskSiblings: function(task) {\n            if (!task) {\n                return null;\n            }\n\n            var parent = this.taskParent(task);\n\n            return this.taskChildren(parent);\n        },\n\n        taskTree: function(task) {\n            var data = [],\n                current,\n                tasks = this.taskChildren(task, true);\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                current = tasks[i];\n                data.push(current);\n\n                if (current.get(\"expanded\")) {\n                    var children = this.taskTree(current);\n\n                    data.push.apply(data, children);\n                }\n            }\n\n            return data;\n        },\n\n        update: function(task, taskInfo) {\n            var that = this,\n                oldValue;\n\n            var offsetChildren = function(parentTask, offset) {\n                var children = that.taskAllChildren(parentTask);\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    children[i]._offset(offset);\n                }\n            };\n\n            var offsetChildrenPlanned = function(parentTask, offset) {\n                var children = that.taskAllChildren(parentTask);\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    children[i]._offsetPlanned(offset);\n                }\n            };\n\n            var modelChangeHandler = function(e) {\n                var field = e.field,\n                    model = e.sender;\n\n                switch (field) {\n                    case \"start\":\n                        that._resolveSummaryStart(that.taskParent(model));\n\n                        offsetChildren(model, model.get(field).getTime() - oldValue.getTime());\n                        break;\n                    case \"end\":\n                        that._resolveSummaryEnd(that.taskParent(model));\n                        break;\n                    case \"plannedStart\":\n                        that._resolveSummaryPlannedStart(that.taskParent(model));\n\n                        if (model.get(field) && oldValue) {\n                            offsetChildrenPlanned(model, model.get(field).getTime() - oldValue.getTime());\n                        }\n                        break;\n                    case \"plannedEnd\":\n                        that._resolveSummaryPlannedEnd(that.taskParent(model));\n                        break;\n                    case \"percentComplete\":\n                        that._resolveSummaryPercentComplete(that.taskParent(model));\n                        break;\n                    case \"orderId\":\n                        that._reorderSiblings(model, oldValue);\n                        break;\n                }\n            };\n\n            if (taskInfo.parentId !== undefined) {\n                oldValue = task.get(\"parentId\");\n\n                if (oldValue !== taskInfo.parentId) {\n                    task.set(\"parentId\", taskInfo.parentId);\n\n                    that._childRemoved(oldValue, task.get(\"orderId\"));\n\n                    task.set(\"orderId\", that.taskSiblings(task).length - 1);\n                    that._resolveSummaryFields(that.taskParent(task));\n                }\n\n                delete taskInfo.parentId;\n            }\n\n            task.bind(\"change\", modelChangeHandler);\n            task.bind(\"equalSet\", modelChangeHandler);\n\n            for (var field in taskInfo) {\n                oldValue = task.get(field);\n\n                if (field === \"plannedStart\" || field === \"plannedEnd\") {\n                    // Update plannedStart and plannedEnd only when oldValue is not undefined or new value is not null\n                    // That limitation is needed to avoid redundant update requests when custom edit template is used\n                    // and the plannedStart and plannedEnd fields are not updated upon edit\n                    if (oldValue !== undefined || taskInfo[field] !== null) {\n                        task.set(field, taskInfo[field]);\n                    }\n                } else if (field === \"start\" || field === \"end\") {\n                    task.set(field, taskInfo[field]);\n                } else if (task.get(field) !== taskInfo[field]) {\n                    task.set(field, taskInfo[field]);\n                }\n            }\n\n            task.unbind(\"change\", modelChangeHandler);\n            task.unbind(\"equalSet\", modelChangeHandler);\n        },\n\n        _childRemoved: function(parentId, index) {\n            var parent = parentId === null ? null : this.get(parentId),\n                children = this.taskChildren(parent);\n\n            for (var i = index, l = children.length; i < l; i++) {\n                children[i].set(\"orderId\", i);\n            }\n\n            this._resolveSummaryFields(parent);\n        },\n\n        _resolveSummaryFields: function(summary) {\n            if (!summary) {\n                return;\n            }\n\n            this._updateSummary(summary);\n\n            if (!this.taskChildren(summary).length) {\n                return;\n            }\n\n            this._resolveSummaryStart(summary);\n            this._resolveSummaryEnd(summary);\n            this._resolveSummaryPlannedStart(summary);\n            this._resolveSummaryPlannedEnd(summary);\n            this._resolveSummaryPercentComplete(summary);\n        },\n\n        _resolveSummaryStart: function(summary) {\n            var that = this;\n            var getSummaryStart = function(parentTask) {\n                var children = that.taskChildren(parentTask);\n                var min = children[0].start.getTime();\n                var currentMin;\n\n                for (var i = 1, l = children.length; i < l; i++) {\n                    currentMin = children[i].start.getTime();\n                    if (currentMin < min) {\n                        min = currentMin;\n                    }\n                }\n\n                return new Date(min);\n            };\n\n            this._updateSummaryRecursive(summary, \"start\", getSummaryStart);\n        },\n\n        _resolveSummaryEnd: function(summary) {\n            var that = this;\n            var getSummaryEnd = function(parentTask) {\n                var children = that.taskChildren(parentTask);\n                var max = children[0].end.getTime();\n                var currentMax;\n\n                for (var i = 1, l = children.length; i < l; i++) {\n                    currentMax = children[i].end.getTime();\n                    if (currentMax > max) {\n                        max = currentMax;\n                    }\n                }\n\n                return new Date(max);\n            };\n\n            this._updateSummaryRecursive(summary, \"end\", getSummaryEnd);\n        },\n\n        _resolveSummaryPlannedStart: function(summary) {\n            var that = this;\n            var getSummaryPlannedStart = function(parentTask) {\n                var children = that.taskChildren(parentTask),\n                    min = null,\n                    currentMin;\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    if (children[i].plannedStart) {\n                        currentMin = children[i].plannedStart.getTime();\n                        if (!min || currentMin < min) {\n                            min = currentMin;\n                        }\n                    }\n                }\n\n                if (!min) {\n                    return null;\n                }\n\n                return new Date(min);\n            };\n\n            this._updateSummaryRecursive(summary, \"plannedStart\", getSummaryPlannedStart);\n        },\n\n        _resolveSummaryPlannedEnd: function(summary) {\n            var that = this;\n            var getSummaryPlannedEnd = function(parentTask) {\n                var children = that.taskChildren(parentTask),\n                    max = null,\n                    currentMax;\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    if (children[i].plannedEnd) {\n                        currentMax = children[i].plannedEnd.getTime();\n                        if (!max || currentMax > max) {\n                            max = currentMax;\n                        }\n                    }\n                }\n\n                if (!max) {\n                    return null;\n                }\n\n                return new Date(max);\n            };\n\n            this._updateSummaryRecursive(summary, \"plannedEnd\", getSummaryPlannedEnd);\n        },\n\n        _resolveSummaryPercentComplete: function(summary) {\n            var that = this;\n            var getSummaryPercentComplete = function(parentTask) {\n                var children = that.taskChildren(parentTask);\n                var percentComplete = new Query(children).aggregate([{\n                    field: \"percentComplete\",\n                    aggregate: \"average\"\n                }]);\n\n                return percentComplete.percentComplete.average;\n            };\n\n            this._updateSummaryRecursive(summary, \"percentComplete\", getSummaryPercentComplete);\n        },\n\n        _reorderSiblings: function(task, oldOrderId) {\n            var orderId = task.get(\"orderId\"),\n                direction = orderId > oldOrderId,\n                startIndex = direction ? oldOrderId : orderId,\n                endIndex = direction ? orderId : oldOrderId,\n                newIndex = direction ? startIndex : startIndex + 1,\n                siblings = this.taskSiblings(task);\n\n            if (!siblings.length) {\n                return;\n            }\n\n            endIndex = Math.min(endIndex, siblings.length - 1);\n\n            for (var i = startIndex; i <= endIndex; i++) {\n                if (siblings[i] === task) {\n                    continue;\n                }\n\n                siblings[i].set(\"orderId\", newIndex);\n\n                newIndex += 1;\n            }\n        },\n\n        _toGanttTask: function(task) {\n            if (!(task instanceof GanttTask)) {\n                var taskInfo = task;\n\n                task = DataSource.fn._createNewModel.call(this);\n                task.accept(taskInfo);\n            }\n\n            return task;\n        },\n\n        _updateSummary: function(task) {\n            if (task !== null) {\n                var childCount = this.taskChildren(task).length;\n\n                task.set(\"summary\", childCount > 0);\n            }\n        },\n\n        _updateSummaryRecursive: function(summary, field, callback) {\n            if (!summary) {\n                return;\n            }\n\n            var value = callback(summary);\n\n            summary.set(field, value);\n\n            var parent = this.taskParent(summary);\n\n            if (parent) {\n                this._updateSummaryRecursive(parent, field, callback);\n            }\n        }\n    });\n\n    GanttDataSource.create = createDataSource(GanttDataSource, \"GanttDataSource\");\n\n    extend(true, kendo.data, {\n        GanttDataSource: GanttDataSource,\n        GanttTask: GanttTask,\n        GanttDependencyDataSource: GanttDependencyDataSource,\n        GanttDependency: GanttDependency\n    });\n})(window.kendo.jQuery);\n\nreturn window.kendo;\n\n}, typeof define == 'function' && define.amd ? define : function(a1, a2, a3) { (a3 || a2)(); });\n\n"],"names":["define","__meta__","id","name","category","description","depends","hidden","$","window","kendo","jQuery","undefined","isArray","Array","extend","map","kendoData","data","Query","DataSource","TreeListDataSource","TreeListModel","PARENTIDFIELD","createDataSource","type","options","dataSource","Error","dateCompareValidator","input","filter","length","field","attr","picker","widgetInstance","ui","dates","container","editable","model","parent","indexOf","plannedStart","plannedEnd","start","end","value","parseDate","val","GanttDependency","Model","fields","predecessorId","successorId","GanttDependencyDataSource","init","fn","call","this","schema","modelBase","dependencies","predecessors","successors","push","apply","_dependencies","view","operator","toArray","GanttTask","create","parentId","defaultValue","validation","required","nullable","orderId","title","dateCompare","message","percentComplete","min","max","step","summary","expanded","duration","plannedDuration","isMilestone","_offset","newValue","i","Date","get","getTime","set","_offsetPlanned","GanttDataSource","base","parentIdField","sort","dir","add","task","_toGanttTask","insert","taskSiblings","index","_reorderSiblings","_resolveSummaryFields","taskParent","remove","children","taskAllChildren","_removeItems","_childRemoved","that","callback","tasks","taskChildren","fromView","order","_sort","taskId","taskLevel","level","taskTree","current","l","update","taskInfo","oldValue","offsetChildren","parentTask","offset","offsetChildrenPlanned","modelChangeHandler","e","sender","_resolveSummaryStart","_resolveSummaryEnd","_resolveSummaryPlannedStart","_resolveSummaryPlannedEnd","_resolveSummaryPercentComplete","bind","unbind","_updateSummary","getSummaryStart","currentMin","_updateSummaryRecursive","getSummaryEnd","currentMax","getSummaryPlannedStart","getSummaryPlannedEnd","getSummaryPercentComplete","aggregate","average","oldOrderId","direction","startIndex","endIndex","newIndex","siblings","Math","_createNewModel","accept","childCount","amd","a1","a2","a3"],"mappings":"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"}