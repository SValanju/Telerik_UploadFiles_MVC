{"version":3,"file":"kendo.data.xml.min.js","sources":["kendo.data.xml.js"],"sourcesContent":["(function(f, define) {\n    define('kendo.data.xml',[ \"kendo.core\" ], f);\n})(function() {\n\nvar __meta__ = { // jshint ignore:line\n    id: \"data.xml\",\n    name: \"XML\",\n    category: \"framework\",\n    depends: [ \"core\" ],\n    hidden: true\n};\n\n/*jshint  eqnull: true, boss: true */\n(function($, undefined) {\n    var kendo = window.kendo,\n        isArray = Array.isArray,\n        isPlainObject = $.isPlainObject,\n        map = $.map,\n        each = $.each,\n        extend = $.extend,\n        getter = kendo.getter,\n        Class = kendo.Class;\n\n    var XmlDataReader = Class.extend({\n        init: function(options) {\n            var that = this,\n                total = options.total,\n                model = options.model,\n                parse = options.parse,\n                errors = options.errors,\n                serialize = options.serialize,\n                data = options.data;\n\n            if (model) {\n                if (isPlainObject(model)) {\n                    var base = options.modelBase || kendo.data.Model;\n\n                    if (model.fields) {\n                        each(model.fields, function(field, value) {\n                            if (isPlainObject(value) && value.field) {\n                                if (!kendo.isFunction(value.field)) {\n                                    value = extend(value, { field: that.getter(value.field) });\n                                }\n                            } else {\n                                value = { field: that.getter(value) };\n                            }\n                            model.fields[field] = value;\n                        });\n                    }\n\n                    var id = model.id;\n                    if (id) {\n                        var idField = {};\n\n                        idField[that.xpathToMember(id, true)] = { field: that.getter(id) };\n                        model.fields = extend(idField, model.fields);\n                        model.id = that.xpathToMember(id);\n                    }\n                    model = base.define(model);\n                }\n\n                that.model = model;\n            }\n\n            if (total) {\n                if (typeof total == \"string\") {\n                    total = that.getter(total);\n                    that.total = function(data) {\n                        return parseInt(total(data), 10);\n                    };\n                } else if (typeof total == \"function\") {\n                    that.total = total;\n                }\n            }\n\n            if (errors) {\n                if (typeof errors == \"string\") {\n                    errors = that.getter(errors);\n                    that.errors = function(data) {\n                        return errors(data) || null;\n                    };\n                } else if (typeof errors == \"function\") {\n                    that.errors = errors;\n                }\n            }\n\n            if (data) {\n                if (typeof data == \"string\") {\n                    data = that.xpathToMember(data);\n                    that.data = function(value) {\n                        var result = that.evaluate(value, data),\n                            modelInstance;\n\n                        result = isArray(result) ? result : [result];\n\n                        if (that.model && model.fields) {\n                            modelInstance = new that.model();\n\n                            return map(result, function(value) {\n                                if (value) {\n                                    var record = {}, field;\n\n                                    for (field in model.fields) {\n                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));\n                                    }\n\n                                    return record;\n                                }\n                            });\n                        }\n\n                        return result;\n                    };\n                } else if (typeof data == \"function\") {\n                    that.data = data;\n                }\n            }\n\n            if (typeof parse == \"function\") {\n                var xmlParse = that.parse;\n\n                that.parse = function(data) {\n                    var xml = parse.call(that, data);\n                    return xmlParse.call(that, xml);\n                };\n            }\n\n            if (typeof serialize == \"function\") {\n                that.serialize = serialize;\n            }\n        },\n        total: function(result) {\n            return this.data(result).length;\n        },\n        errors: function(data) {\n            return data ? data.errors : null;\n        },\n        serialize: function(data) {\n            return data;\n        },\n        parseDOM: function(element) {\n            var result = {},\n                parsedNode,\n                node,\n                nodeType,\n                nodeName,\n                member,\n                attribute,\n                attributes = element.attributes,\n                attributeCount = attributes.length,\n                idx;\n\n            for (idx = 0; idx < attributeCount; idx++) {\n                attribute = attributes[idx];\n                result[\"@\" + attribute.nodeName] = attribute.nodeValue;\n            }\n\n            for (node = element.firstChild; node; node = node.nextSibling) {\n                nodeType = node.nodeType;\n\n                if (nodeType === 3 || nodeType === 4) {\n                    // text nodes or CDATA are stored as #text field\n                    result[\"#text\"] = node.nodeValue;\n                } else if (nodeType === 1) {\n                    // elements are stored as fields\n                    parsedNode = this.parseDOM(node);\n\n                    nodeName = node.nodeName;\n\n                    member = result[nodeName];\n\n                    if (isArray(member)) {\n                        // elements of same nodeName are stored as array\n                        member.push(parsedNode);\n                    } else if (member !== undefined) {\n                        member = [member, parsedNode];\n                    } else {\n                        member = parsedNode;\n                    }\n\n                    result[nodeName] = member;\n                }\n            }\n            return result;\n        },\n\n        evaluate: function(value, expression) {\n            var members = expression.split(\".\"),\n                member,\n                result,\n                length,\n                intermediateResult,\n                idx;\n\n            while (member = members.shift()) {\n                value = value[member];\n\n                if (isArray(value)) {\n                    result = [];\n                    expression = members.join(\".\");\n\n                    for (idx = 0, length = value.length; idx < length; idx++) {\n                        intermediateResult = this.evaluate(value[idx], expression);\n\n                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];\n\n                        result.push.apply(result, intermediateResult);\n                    }\n\n                    return result;\n                }\n            }\n\n            return value;\n        },\n\n        parse: function(xml) {\n            var documentElement,\n                tree,\n                result = {};\n\n            documentElement = xml.documentElement || $.parseXML(xml).documentElement;\n\n            tree = this.parseDOM(documentElement);\n\n            result[documentElement.nodeName] = tree;\n\n            return result;\n        },\n\n        xpathToMember: function(member, raw) {\n            if (!member) {\n                return \"\";\n            }\n\n            member = member.replace(/^\\//, \"\") // remove the first \"/\"\n                           .replace(/\\//g, \".\"); // replace all \"/\" with \".\"\n\n            if (member.indexOf(\"@\") >= 0) {\n                // replace @attribute with '[\"@attribute\"]'\n                return member.replace(/\\.?(@.*)/, raw ? '$1' : '[\"$1\"]');\n            }\n\n            if (member.indexOf(\"text()\") >= 0) {\n                // replace \".text()\" with '[\"#text\"]'\n                return member.replace(/(\\.?text\\(\\))/, raw ? '#text' : '[\"#text\"]');\n            }\n\n            return member;\n        },\n        getter: function(member) {\n            return getter(this.xpathToMember(member), true);\n        }\n    });\n\n    $.extend(true, kendo.data, {\n        XmlDataReader: XmlDataReader,\n        readers: {\n            xml: XmlDataReader\n        }\n    });\n})(window.kendo.jQuery);\n\nreturn window.kendo;\n\n}, typeof define == 'function' && define.amd ? define : function(a1, a2, a3) { (a3 || a2)(); });\n\n"],"names":["define","__meta__","id","name","category","depends","hidden","$","window","kendo","jQuery","undefined","isArray","Array","isPlainObject","map","each","extend","getter","Class","XmlDataReader","init","options","that","this","total","model","parse","errors","serialize","data","base","modelBase","Model","fields","field","value","isFunction","idField","xpathToMember","parseInt","result","evaluate","modelInstance","record","_parse","xmlParse","xml","call","length","parseDOM","element","parsedNode","node","nodeType","nodeName","member","attribute","attributes","attributeCount","idx","nodeValue","firstChild","nextSibling","push","expression","members","split","intermediateResult","shift","join","apply","documentElement","tree","parseXML","raw","replace","indexOf","readers","amd","a1","a2","a3"],"mappings":"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"}